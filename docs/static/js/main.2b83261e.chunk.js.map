{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Box","styled","div","Status","Inventory","Training","Map","Alvo","alvoPos","top","left","ClickArea","App","useState","training","setTraining","setAlvoPos","alvoCount","setAlvoCount","respawAlvo","Math","random","style","display","flexWrap","disabled","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAMMA,GAFYC,IAAOC,IAAV,0BAEHD,IAAOC,IAAV,0NAaHC,EAASF,YAAOD,EAAPC,CAAH,4CAING,EAAYH,YAAOD,EAAPC,CAAH,4CAITI,EAAWJ,YAAOD,EAAPC,CAAH,yDAIRK,EAAML,YAAOD,EAAPC,CAAH,yFAMHM,EAAON,IAAOC,IAAV,yKAOD,qBAAGM,QAAsBC,OACxB,qBAAGD,QAAsBE,QAG7BC,EAAYV,IAAOC,IAAV,6DAqEAU,MAhEf,WAAgB,IAAD,EACmBC,qBADnB,mBACNC,EADM,KACIC,EADJ,OAEiBF,qBAFjB,mBAENL,EAFM,KAEGQ,EAFH,OAGqBH,mBAAS,GAH9B,mBAGNI,EAHM,KAGKC,EAHL,KAOb,SAASC,IACPH,EAAW,CACTP,IAAI,GAAD,OAAqB,GAAhBW,KAAKC,SAAV,KACHX,KAAK,GAAD,OAAqB,GAAhBU,KAAKC,SAAV,OAcR,OACE,sBAAKC,MAAO,CAAEC,QAAS,OAAQC,SAAU,QAAzC,UACE,eAACrB,EAAD,WACE,uCADF,OAGE,uBAHF,WArB+C,GA0B7C,uBALF,aArBmD,EA4BjD,uBAPF,YArBsD,EA8BpD,uBATF,YArByD,EAgCvD,uBAXF,UArB4D,MAmC5D,cAACC,EAAD,UACE,4CAEF,eAACC,EAAD,WACE,kDACA,wBAAQoB,SAAUX,EAAUY,QA1BlC,WACEX,GAAY,GACZI,KAwBI,qBAGEF,GAAa,6CAAgBA,MAAsB,GACrD,cAACN,EAAD,UACGG,GACC,cAACP,EAAD,CAAMC,QAASA,EAASkB,QArClC,WACER,EAAaD,EAAY,GACzBE,KAmCQ,uBAMN,cAACb,EAAD,UACE,0CCnGOqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2b83261e.chunk.js","sourcesContent":["import \"./App.css\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\n\nconst Container = styled.div``;\n\nconst Box = styled.div`\n  padding: 10px;\n  border: 4px solid #fff;\n  margin: 6px;\n  p {\n    border-bottom: 4px solid #fff;\n    padding: 10px;\n    text-align: center;\n    width: 100%;\n  }\n  height: 60vh;\n`;\n\nconst Status = styled(Box)`\n  width: 20vw;\n`;\n\nconst Inventory = styled(Box)`\n  width: 26vw;\n`;\n\nconst Training = styled(Box)`\n  width: calc(50vw - 80px);\n`;\n\nconst Map = styled(Box)`\n  border: 4px solid #fff;\n  width: 100vw;\n  height: 30vh;\n`;\n\nconst Alvo = styled.div`\n  background: red;\n  color: white;\n  cursor: pointer;\n  padding: 10px;\n  width: 40px;\n  position: relative;\n  top: ${({ alvoPos }) => alvoPos.top};\n  left: ${({ alvoPos }) => alvoPos.left};\n`;\n\nconst ClickArea = styled.div`\n  width: 100%;\n  height: 100%;\n`;\n\nfunction App() {\n  const [training, setTraining] = useState();\n  const [alvoPos, setAlvoPos] = useState();\n  const [alvoCount, setAlvoCount] = useState(0);\n\n  let [health, strength, defence, agility, magic] = [10, 5, 5, 5, 10];\n\n  function respawAlvo() {\n    setAlvoPos({\n      top: `${Math.random() * 80}%`,\n      left: `${Math.random() * 80}%`,\n    });\n  }\n\n  function alvoClicado() {\n    setAlvoCount(alvoCount + 1);\n    respawAlvo();\n  }\n\n  function onTreinar() {\n    setTraining(true);\n    respawAlvo();\n  }\n\n  return (\n    <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n      <Status>\n        <p>Status</p>\n        hero\n        <br />\n        health: {health}\n        <br />\n        strength: {strength}\n        <br />\n        defence: {defence}\n        <br />\n        agility: {agility}\n        <br />\n        magic: {magic}\n      </Status>\n      <Inventory>\n        <p>Inventory</p>\n      </Inventory>\n      <Training>\n        <p>Training / Battle</p>\n        <button disabled={training} onClick={onTreinar}>\n          treinar\n        </button>\n        {(alvoCount && <span>cliques: {alvoCount}</span>) || \"\"}\n        <ClickArea>\n          {training && (\n            <Alvo alvoPos={alvoPos} onClick={alvoClicado}>\n              alvo\n            </Alvo>\n          )}\n        </ClickArea>\n      </Training>\n      <Map>\n        <p>Map</p>\n      </Map>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}